name: "SQL Naming Convention Check"
description: "Validates SQL file naming conventions according to Lykke policy"
inputs:
  base-branch:
    description: "Base branch name for comparison."
    required: true
    default: "master"
  compare-branch:
    description: "Branch name to compare with the base branch."
    required: true
outputs:
  validation-result:
    description: "List of files along with violated rule that do not follow the SQL naming convention. Provided in base64 encoding."
    value: ${{ steps.set_output.outputs.validation-result }}

runs:
  using: "composite"
  steps:
    - name: Fetch base and compare branches
      run: |
        git fetch origin "${{ inputs.base-branch }}" "${{ inputs.compare-branch }}"
      shell: bash

    - name: Get list of changed SQL files
      id: diff
      run: |
        git diff --name-only origin/${{ inputs.base-branch }}...origin/${{ inputs.compare-branch }} | grep -E '\.sql$' > sql_files.txt || true
      shell: bash

    - name: Empty check
      id: empty_check
      run: |
        if [[ ! -s sql_files.txt ]]; then
          echo "No SQL files found to validate."
          # Set empty validation result
          echo "validation-result=" >> $GITHUB_OUTPUT
          exit 0
        fi
      shell: bash

    - name: Validate SQL Naming Conventions
      id: validate
      run: |
        "${GITHUB_ACTION_PATH}/scripts/validate_sql_naming/validate_sql_naming.sh" sql_files.txt > validation_result.txt
      shell: bash

    - name: Set output
      id: set_output
      run: |
        # If validation_result.txt exists and is not empty, encode it.
        if [[ -s validation_result.txt ]]; then
          encoded_result=$(base64 -w0 validation_result.txt)
        else
          # If no violations found, set an empty result.
          encoded_result=""
        fi
        echo "validation-result=$encoded_result" >> $GITHUB_OUTPUT
      shell: bash
